# -*- coding: utf-8 -*-
"""notebook.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1c1-drEGWmHdHjoIl5zM10cVZocqpXAW0

# Proyek Akhir: Menyelesaikan Permasalahan Perusahaan Edutech

- Nama: Aryadi Belo Rerung
- Email: a428yam073@devacademy.id
- Id Dicoding: Aryadi Belo Rerung

## Persiapan

### Menyiapkan library yang dibutuhkan
"""

import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, roc_auc_score, accuracy_score
import joblib
from sqlalchemy import create_engine

"""### Menyiapkan data yang akan diguankan"""

# Dataset import from Dicoding GitHub Repository
dataset_url = 'https://raw.githubusercontent.com/dicodingacademy/dicoding_dataset/refs/heads/main/students_performance/data.csv'

# Read dataset
df = pd.read_csv(dataset_url, delimiter=';')
df

"""## Data Understanding"""

df.info()

df.describe()

df.columns

"""Jika dilihat pada nama kolom di atas, terdapat kolom dengan kesalahan penulisan yaitu kolom 'nacionality' yang perlu diperbaiki."""

df.rename(columns={"Nacionality": "Nationality"}, inplace=True)

print(df.columns)

#Mengecek jumlah missing value
df.isna().sum()

"""Dapat dilihat bahwa tidak ada nilai yang hilang (missing value) pada dataset ini."""

course_map = {
    33: 'Science & Technology', 9003: 'Science & Technology', 9119: 'Science & Technology', 9130: 'Science & Technology',
    171: 'Social Science', 9070: 'Social Science', 9773: 'Social Science', 9853: 'Social Science', 9238: 'Social Science', 8014: 'Social Science',
    9147: 'Business & Management', 9670: 'Business & Management', 9991: 'Business & Management', 9254: 'Business & Management'
}

country_map = {
    101: 'Latin America', 109: 'Latin America', 108: 'Latin America', 41: 'Latin America',
    105: 'East Europe', 103: 'East Europe', 100: 'East Europe', 62: 'East Europe',
    26: 'Africa', 25: 'Africa', 24: 'Africa', 22: 'Africa', 21: 'Africa',
    14: 'North & West Europe', 17: 'North & West Europe', 2: 'North & West Europe', 13: 'North & West Europe'
}

occupation_map = {
    1: 'Management', 112: 'Management', 114: 'Management',
    2: 'Professional', 121: 'Professional', 122: 'Professional', 123: 'Professional', 124: 'Professional',
    3: 'Technician', 131: 'Technician', 132: 'Technician', 134: 'Technician', 135: 'Technician',
    4: 'Administrative', 141: 'Administrative', 143: 'Administrative', 144: 'Administrative',
    5: 'Service & Sales', 151: 'Service & Sales', 152: 'Service & Sales', 153: 'Service & Sales', 154: 'Service & Sales',
    6: 'Labour', 7: 'Labour', 8: 'Labour', 9: 'Labour',
    161: 'Labour', 163: 'Labour', 171: 'Labour', 172: 'Labour', 174: 'Labour', 175: 'Labour',
    181: 'Labour', 182: 'Labour', 183: 'Labour', 192: 'Labour', 193: 'Labour', 194: 'Labour', 195: 'Labour',
    10: 'Armed Forces', 101: 'Armed Forces', 102: 'Armed Forces', 103: 'Armed Forces'
}

education_map = {
    4: 'Master', 43: 'Master',
    5: 'Doctorate', 44: 'Doctorate',
    2: 'Bachelor & Specialized Education', 3: 'Bachelor & Specialized Education', 18: 'Bachelor & Specialized Education',
    39: 'Bachelor & Specialized Education', 40: 'Bachelor & Specialized Education', 41: 'Bachelor & Specialized Education', 42: 'Bachelor & Specialized Education',
    1: 'High School', 9: 'High School', 10: 'High School', 12: 'High School', 14: 'High School', 19: 'High School', 27: 'High School', 29: 'High School',
    11: 'Middle School', 26: 'Middle School', 30: 'Middle School', 38: 'Middle School',
    36: 'Primary', 37: 'Primary'
}

# Fungsi untuk pembersihan data
def clean_value(x, mapping, default):
    return mapping.get(x, default)

# Fungsi pembersihan untuk setiap kategori
def clean_course(x):
    return clean_value(x, course_map, 'Health Science')

def clean_country(x):
    return clean_value(x, country_map, 'South Europe')

def clean_occupation(x):
    return clean_value(x, occupation_map, 'Unemployed')

def clean_education(x):
    return clean_value(x, education_map, 'No Education')

"""### **Exploratory Data Analysis (EDA)**"""

# Distribusi variabel target
plt.figure(figsize=(6, 4))
sns.countplot(data=df, x='Status', palette='Set2')
plt.title('Distribusi Status Mahasiswa')
plt.xlabel('Status')
plt.ylabel('Jumlah')
plt.tight_layout()
plt.show()

status_counts = df['Status'].value_counts(normalize=True)

plt.figure(figsize=(6, 6))
status_counts.plot(
    kind='pie',
    autopct='%1.1f%%',
    title='Distribusi Status Mahasiswa',
    ylabel='',
    legend=False
)
plt.show()

"""Sebanyak 32,1% mahasiswa mengalami putus studi (dropout), 49,9% berhasil menyelesaikan pendidikan, sementara 17,9% sisanya masih aktif menempuh perkuliahan."""

# Distribusi umur saat masuk
plt.figure(figsize=(6, 4))
sns.histplot(df['Age_at_enrollment'], bins=20, kde=True, color='steelblue')
plt.title('Distribusi Usia Saat Masuk')
plt.xlabel('Usia')
plt.tight_layout()
plt.show()

"""Sebagian besar mahasiswa mulai mendaftar ke universitas pada usia 20 tahun"""

# --- Distribusi Gender dan Scholarship ---
fig, axes = plt.subplots(1, 2, figsize=(12, 6))

# Warna baru yang lebih harmonis
gender_colors = ['#4e79a7', '#f28e2b']
scholarship_colors = ['#e15759', '#76b7b2']

# Distribusi Gender
gender_counts = df['Gender'].value_counts()
axes[0].pie(
    gender_counts,
    labels=['Perempuan', 'Laki-Laki'],
    autopct='%1.1f%%',
    colors=gender_colors,
    startangle=90
)
axes[0].set_title('Distribusi Gender')

# Distribusi Penerima Beasiswa
scholarship_counts = df['Scholarship_holder'].value_counts()
axes[1].pie(
    scholarship_counts,
    labels=['Tidak', 'Ya'],
    autopct='%1.1f%%',
    colors=scholarship_colors,
    startangle=90
)
axes[1].set_title('Distribusi Penerima Beasiswa')

plt.tight_layout()
plt.show()

"""- Sebagian besar mahasiswa merupakan perempuan, dengan persentase mencapai 64,8%, sementara mahasiswa laki-laki berjumlah 35,2%.
- Selain itu, hanya 24,8% dari seluruh mahasiswa yang menerima beasiswa, sedangkan mayoritas, yakni 75,2%, membiayai kuliah mereka secara mandiri atau pribadi.
"""

plt.figure(figsize=(10,6))
# Use the exact column name from your DataFrame
sns.countplot(x='Marital_status', data=df)  # or whatever the exact column name is
plt.title('Distribution of Marital Status')
plt.xticks([0,1,2,3,4,5], ['Single','Married','Widower','Divorced','Facto Union','Legally Separated'])
plt.show()

"""Kebanyakan mahasiswa berstatus lajang atau belum menikah."""

# --- Perbandingan Status berdasarkan Gender ---
plt.figure(figsize=(8, 5))
sns.countplot(
    data=df,
    x='Gender',
    hue='Status',
    palette='Set2'  # Menggunakan palet warna yang lebih lembut dan harmonis
)

plt.title('Perbandingan Status Mahasiswa Berdasarkan Gender')
plt.xlabel('Gender (0 = Perempuan, 1 = Laki-laki)')
plt.ylabel('Jumlah Mahasiswa')
plt.legend(title='Status Mahasiswa', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.show()

"""- Jumlah mahasiswi perempuan yang mengalami Dropout (DO) sedikit lebih tinggi dibandingkan dengan mahasiswa laki-laki.
- Namun, jika dibandingkan dengan jumlah mahasiswa laki-laki yang berhasil lulus, lebih banyak mahasiswa laki-laki yang mengalami Dropout.
"""

# Status vs Scholarship Holder
plt.figure(figsize=(8, 5))
sns.countplot(
    data=df,
    x='Scholarship_holder',
    hue='Status',
    palette='Set3'  # Ganti ke palet warna yang lebih cerah dan ramah
)

plt.title('Perbandingan Status Mahasiswa Berdasarkan Kepemilikan Beasiswa')
plt.xlabel('Penerima Beasiswa (0 = Tidak, 1 = Ya)')
plt.ylabel('Jumlah Mahasiswa')
plt.legend(title='Status Mahasiswa', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.show()

"""Mahasiswa penerima beasiswa yang mengalami Dropout (DO) jumlahnya jauh lebih sedikit dibandingkan dengan mahasiswa yang tidak menerima beasiswa namun mengalami Dropout."""

# Apply cleaning functions
df['course_category'] = df['Course'].apply(clean_course)
df['country_region'] = df['Nationality'].apply(clean_country)
df['occupation_group'] = df['Mothers_occupation'].apply(clean_occupation)
df['education_level'] = df['Mothers_qualification'].apply(clean_education)
df['father_occupation_group'] = df['Fathers_occupation'].apply(clean_occupation)
df['father_education_level'] = df['Fathers_qualification'].apply(clean_education)

df

# Set style for better looking plots
sns.set(style="whitegrid")
plt.figure(figsize=(15, 10))

# Helper function to plot countplot
def plot_countplot(data, x, order, palette, title, xlabel, rotation=45, hue=None, legend_title=None):
    sns.countplot(data=data, x=x, order=order, palette=palette, hue=hue)
    plt.title(title)
    plt.xticks(rotation=rotation)
    plt.xlabel(xlabel)
    if hue:
        plt.legend(title=legend_title)

# 1. Course Categories Distribution
plt.subplot(2, 2, 1)
course_order = ['Science & Technology', 'Social Science', 'Business & Management', 'Health Science']
plot_countplot(df, 'course_category', course_order, 'Set2', 'Distribution of Course Categories', 'Course Category')

# 2. Country Regions Distribution
plt.subplot(2, 2, 2)
region_order = ['Latin America', 'East Europe', 'Africa', 'North & West Europe', 'South Europe']
plot_countplot(df, 'country_region', region_order, 'coolwarm', 'Distribution by Country Region', 'Region')

# 3. Occupation Groups Comparison (Mother vs Father)
plt.subplot(2, 2, 3)
occupation_order = ['Management', 'Professional', 'Technician', 'Administrative',
                   'Service & Sales', 'Labour', 'Armed Forces', 'Unemployed']

# Create a combined dataframe for occupation comparison
occupation_df = pd.DataFrame({
    'Occupation': pd.concat([df["Mothers_occupation"], df["Fathers_occupation"]]),
    'Parent': ['Mother']*len(df) + ['Father']*len(df),
    'Occupation Group': pd.concat([df['occupation_group'], df['father_occupation_group']])
})
plot_countplot(occupation_df, 'Occupation Group', occupation_order, 'Blues', "Parents' Occupation Groups Comparison", 'Occupation Group', hue='Parent', legend_title='Parent')

# 4. Education Levels Comparison (Mother vs Father)
plt.subplot(2, 2, 4)
education_order = ['No Education', 'Primary', 'Middle School', 'High School',
                  'Bachelor & Specialized Education', 'Master', 'Doctorate']

# Create a combined dataframe for education comparison
education_df = pd.DataFrame({
    'Education': pd.concat([df["Mothers_qualification"], df["Fathers_qualification"]]),
    'Parent': ['Mother']*len(df) + ['Father']*len(df),
    'Education Level': pd.concat([df['education_level'], df['father_education_level']])
})
plot_countplot(education_df, 'Education Level', education_order, 'viridis', "Parents' Education Levels Comparison", 'Education Level', hue='Parent', legend_title='Parent')

plt.tight_layout()
plt.show()

"""- Jurusan yang paling banyak diminati adalah Ilmu Sosial, sementara jurusan di kluster Sains & Teknologi memiliki minat yang lebih rendah.
- Sebagian besar mahasiswa berasal dari wilayah Eropa Selatan.
- Sebagian besar orang tua mahasiswa bekerja sebagai buruh, dan mayoritas orang tua memiliki tingkat pendidikan terakhir setingkat SMA atau setara dengan high school.
"""

plt.figure(figsize=(16, 7))
sns.countplot(data=df, x='course_category', hue='Status', palette='coolwarm')
plt.title('Distribusi Status Mahasiswa per Course')
plt.xlabel('Nama Course')
plt.ylabel('Jumlah Mahasiswa')
plt.xticks( ha='right')
plt.legend(title='Status')
plt.tight_layout()
plt.show()

"""Berdasarkan rasio antara Dropout (DO) dan kelulusan, mayoritas mahasiswa yang mengalami DO berasal dari jurusan Bisnis & Manajemen serta Sains & Teknologi."""

# Set style
sns.set(style="whitegrid", palette="pastel", font_scale=1.1)
plt.figure(figsize=(18, 20))

# 1. Grade Distribution by Status
plt.subplot(4, 2, 1)
sns.boxplot(data=df, x='Status', y='Curricular_units_2nd_sem_grade',
            order=['Dropout', 'Enrolled', 'Graduate'], showfliers=False)
plt.title('2nd Semester Grade Distribution by Status')
plt.xlabel('')
plt.ylabel('Grade')

plt.subplot(4, 2, 2)
sns.boxplot(data=df, x='Status', y='Curricular_units_1st_sem_grade',
            order=['Dropout', 'Enrolled', 'Graduate'], showfliers=False)
plt.title('1st Semester Grade Distribution by Status')
plt.xlabel('')
plt.ylabel('Grade')

# 2. Approved Courses by Status
plt.subplot(4, 2, 3)
sns.boxplot(data=df, x='Status', y='Curricular_units_2nd_sem_approved',
            order=['Dropout', 'Enrolled', 'Graduate'], showfliers=False)
plt.title('2nd Semester Approved Courses by Status')
plt.xlabel('')
plt.ylabel('Number of Approved Courses')

plt.subplot(4, 2, 4)
sns.boxplot(data=df, x='Status', y='Curricular_units_1st_sem_approved',
            order=['Dropout', 'Enrolled', 'Graduate'], showfliers=False)
plt.title('1st Semester Approved Courses by Status')
plt.xlabel('')
plt.ylabel('Number of Approved Courses')

# 3. Evaluation Participation
plt.subplot(4, 2, 5)
sns.boxplot(data=df, x='Status', y='Curricular_units_2nd_sem_evaluations',
            order=['Dropout', 'Enrolled', 'Graduate'], showfliers=False)
plt.title('2nd Semester Evaluations by Status')
plt.xlabel('')
plt.ylabel('Number of Evaluations')

plt.subplot(4, 2, 6)
sns.boxplot(data=df, x='Status', y='Curricular_units_1st_sem_evaluations',
            order=['Dropout', 'Enrolled', 'Graduate'], showfliers=False)
plt.title('1st Semester Evaluations by Status')
plt.xlabel('')
plt.ylabel('Number of Evaluations')

plt.tight_layout()
plt.show()

# Additional Visualizations
plt.figure(figsize=(18, 6))

plt.tight_layout()
plt.show()

"""- Mahasiswa dengan nilai rendah pada Semester 1 dan Semester 2 cenderung memiliki risiko Dropout (DO) yang lebih tinggi.
- Selain itu, mahasiswa yang mengalami DO mengambil jumlah mata kuliah (curricular units) lebih sedikit dibandingkan dengan mahasiswa yang tidak mengalami DO (terdaftar atau lulus). Pertanyaannya, apakah hal ini disebabkan oleh IPK yang lebih rendah sehingga mereka tidak dapat mengambil mata kuliah lebih banyak, ataukah faktor biaya yang membuat mahasiswa DO memilih untuk mengambil lebih sedikit mata kuliah?
"""

# Tuition Fees Status
fee_status = df.groupby(['Status', 'Tuition_fees_up_to_date']).size().unstack()
fee_status = fee_status.div(fee_status.sum(axis=1), axis=0)
fee_status.loc[['Dropout', 'Enrolled', 'Graduate']].plot(
    kind='bar', stacked=True, color=['#FF6347', '#4682B4'])  # Ganti warna menjadi lebih kontras
plt.title('Tuition Fee Status by Student Status')
plt.xlabel('')
plt.ylabel('Proportion')
plt.legend(title='Fees Up-to-date', labels=['No', 'Yes'], bbox_to_anchor=(1, 1))
plt.xticks(rotation=0)
plt.tight_layout()
plt.show()

"""Mahasiswa yang mengalami Dropout (DO) cenderung menghadapi masalah terkait pembiayaan kuliah (tuition fees), terutama mengingat hanya sedikit mahasiswa yang menerima beasiswa, seperti yang terlihat dalam visualisasi data sebelumnya."""

plt.figure(figsize=(10, 6))
sns.scatterplot(x='Age_at_enrollment', y='Admission_grade', hue='Status', data=df, palette='deep')  # Menggunakan palet 'deep'
plt.title('Distribution of Admission Grades by Age at Enrollment and Status')
plt.xlabel('Age at Enrollment')
plt.ylabel('Admission Grade')
plt.show()

"""## Data Preparation / Preprocessing"""

df

# Menghapus duplikat
df = df.drop_duplicates()
print(df)

df.info()

# Buat salinan data
df_corr = df.copy()

# Encode kolom 'Status' ke numerik
# Misalnya: 'Dropout' = 0, 'Graduate' = 1, 'Enrolled' = 2
status_mapping = {'Dropout': 0, 'Graduate': 1, 'Enrolled': 2, }
df_corr['Status_encoded'] = df_corr['Status'].map(status_mapping)

# Gabungkan kolom numerik saja + Status_encoded
numeric_df = df_corr.select_dtypes(include=['int64', 'float64'])
numeric_df['Status_encoded'] = df_corr['Status_encoded']

# Hitung korelasi
correlation_matrix = numeric_df.corr()

# Plot heatmap
plt.figure(figsize=(16, 12))
sns.heatmap(correlation_matrix[['Status_encoded']].sort_values(by='Status_encoded', ascending=False),
            annot=True, cmap='coolwarm', fmt=".2f", linewidths=0.5)
plt.title('Correlation Heatmap terhadap Status Mahasiswa (Encoded)')
plt.show()

relevant_features = correlation_matrix['Status_encoded'][abs(correlation_matrix['Status_encoded']) > 0.1].sort_values(ascending=False)
print(relevant_features)

# Define selected features and target variable
selected_features = [
    'Curricular_units_2nd_sem_grade', 'Curricular_units_2nd_sem_approved',
    'Curricular_units_1st_sem_grade', 'Tuition_fees_up_to_date',
    'Curricular_units_1st_sem_approved', 'Curricular_units_2nd_sem_evaluations',
    'Curricular_units_1st_sem_evaluations', 'Scholarship_holder', 'Application_mode',
    'Gender', 'Debtor', 'Age_at_enrollment', 'course_category',
    'Curricular_units_1st_sem_enrolled', 'Curricular_units_2nd_sem_enrolled'
]

# Create binary target variable
df['Dropout'] = df['Status'].apply(lambda x: 0 if x in ['Graduate', 'Enrolled'] else 1)

# Split data
X = df[selected_features]
y = df['Dropout']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

# Define numeric and categorical features
numeric_features = [
    'Curricular_units_2nd_sem_grade', 'Curricular_units_2nd_sem_approved',
    'Curricular_units_1st_sem_grade', 'Curricular_units_1st_sem_approved',
    'Curricular_units_2nd_sem_evaluations', 'Curricular_units_1st_sem_evaluations',
    'Age_at_enrollment', 'Curricular_units_1st_sem_enrolled', 'Curricular_units_2nd_sem_enrolled'
]
categorical_features = ['Tuition_fees_up_to_date', 'Scholarship_holder', 'Application_mode', 'Gender', 'Debtor', 'course_category']

# Preprocessing pipeline
preprocessor = ColumnTransformer(
    transformers=[
        ('num', StandardScaler(), numeric_features),
        ('cat', OneHotEncoder(handle_unknown='ignore', sparse_output=False), categorical_features)
    ]
)

"""## Modeling"""

from sklearn.ensemble import GradientBoostingClassifier
from xgboost import XGBClassifier


# Model list
models = {
    'Random Forest': RandomForestClassifier(random_state=42),
    'XGBoost': XGBClassifier(use_label_encoder=False, eval_metric='logloss', random_state=42),
    'Gradient Boosting': GradientBoostingClassifier(random_state=42)
}

# Results storage
results = []

# Training and evaluation
for model_name, model in models.items():
    pipeline = Pipeline(steps=[
        ('preprocessor', preprocessor),
        ('classifier', model)
    ])

    pipeline.fit(X_train, y_train)
    y_pred = pipeline.predict(X_test)
    y_proba = pipeline.predict_proba(X_test)[:, 1]

    acc = accuracy_score(y_test, y_pred)
    roc = roc_auc_score(y_test, y_proba)

    results.append({
        'Model': model_name,
        'Accuracy': acc,
        'ROC AUC': roc
    })

# Show comparison
results_df = pd.DataFrame(results)
print(results_df)

"""## Evaluation"""

from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay, accuracy_score

# Prediksi test set
y_pred_gb = pipeline.predict(X_test)

# Hitung confusion matrix
cm = confusion_matrix(y_test, y_pred_gb)

# Tampilkan confusion matrix
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=['No Dropout', 'Dropout'])
disp.plot(cmap='Blues')
plt.title('Confusion Matrix - Gradient Boosting')
plt.show()

# Hitung akurasi manual dari confusion matrix
tn, fp, fn, tp = cm.ravel()  # unpack confusion matrix
manual_accuracy = (tp + tn) / (tn + fp + fn + tp)

print(f"Akurasi dari Confusion Matrix: {manual_accuracy:.4f}")

import os

# Inisialisasi model Gradient Boosting Classifier
best_model = GradientBoostingClassifier(random_state=42)

# Membuat pipeline dengan preprocessor dan classifier
pipeline_best = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('classifier', best_model)
])

# Melatih model menggunakan data training
pipeline_best.fit(X_train, y_train)

# Menyimpan model pipeline yang telah dilatih ke file
joblib.dump(pipeline_best, "gb_dropout_model.pkl")

print("Model Gradient Boosting berhasil disimpan!")

# Load model Gradient Boosting yang sudah disimpan
loaded_pipeline = joblib.load("gb_dropout_model.pkl")

# Coba prediksi ulang menggunakan loaded model
y_pred_loaded = loaded_pipeline.predict(X_test)

# Cek hasil akurasi
from sklearn.metrics import accuracy_score

loaded_accuracy = accuracy_score(y_test, y_pred_loaded)
print(f"Akurasi model Gradient Boosting yang diload: {loaded_accuracy:.4f}")

"""## **Additional**

### **Ekspor data yang dibutuhkan untuk membuat Dashboard**
"""

df

# Simpan dataset ke file CSV
df.to_csv("students_clean.csv", index=False)
print("Dataset utama berhasil disimpan")

"""### **Database Connect**"""

URL = "postgresql://postgres.qnpkmindnddnnzbwdouu:dataScienceproject321#@aws-0-ap-southeast-1.pooler.supabase.com:6543/postgres"

engine = create_engine(URL)
df.to_sql('students_clean', engine, if_exists='replace', index=False)
print("Dataset berhasil di unggah ke Supabase!")

"""### **Buat requirements.txt untuk dependensi**"""

!pip freeze > requirements.txt